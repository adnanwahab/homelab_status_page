const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const schema = `
CREATE TABLE IF NOT EXISTS files (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    filename TEXT,
    content TEXT
)
`

const frontMatter  = `---
title: My favorite page
toc: false
---`


function convertMdToSqlite() {
    const db = new sqlite3.Database('modules_odyssey.db');

    db.serialize(() => {
        db.run(schema)
    });
    const directoryPath = path.join(__dirname, '../data/odyssey');

    const folders = fs.readdirSync(directoryPath)
 

    folders.forEach(folder => {
        const folderPath = path.join(directoryPath, folder);

        let buffer = "" + frontMatter

        const partial_files = fs.readdirSync(folderPath)
        partial_files.forEach(file => {
            const filePath = path.join(folderPath, file);
            const partialfileContent = fs.readFileSync(filePath, 'utf8')
            const stmt = db.prepare("INSERT INTO files (filename, content) VALUES (?, ?)");
            stmt.run(file, partialfileContent);
            stmt.finalize();
            buffer += partialfileContent
        });
       
        fs.writeFileSync("course_content/src/"+folder+'.md', buffer)
    });


    db.close((err) => {
        if (err) {
            return console.error(err.message);
        }
        console.log('Closed the database connection.');
    });
}



convertMdToSqlite();

function main () {
    convertMdToSqlite()

}

main()

 ///the course is generated by a modules.json 
 // each submodule is a folder with a index.md

 // this script converts all the md files to a sqlite database
 // each prompt in the modules.json is a prompt that is run on the ai to generate the content of the submodule
 // each prompt makes a file in the folder bucket


 // the files in the bucket are overwritten after they are storeed in sql
 // the output of the sql database is directly written to the course_content/src folder
